SET CURRENT_BRAND = BR;  SET DATEINDEX = 20140101;  SET DATE_NOW = 2014-01-01; SET CURRENT_COUNTRY=US;

DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_US_CALIB_CUSTOMER_BASE;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_US_CALIB_CUSTOMER_BASE AS SELECT
DISTINCT CUST_KEY AS CUSTOMER_KEY, TO_DATE(ACQUISITION_DATE) AS ACQUISITION_DATE, BRAND, COUNTRY
FROM MDS.ODS_BRAND_CUSTOMER_T
WHERE 
BRAND='${hiveconf:CURRENT_BRAND}' AND 
COUNTRY='${hiveconf:CURRENT_COUNTRY}' AND 
UNIX_TIMESTAMP(ACQUISITION_DATE, 'yyyy-MM-dd_HH-mm-ss_Z') < UNIX_TIMESTAMP('${hiveconf:DATE_NOW}','yyyy-MM-dd') ;

SELECT COUNT(*) FROM TGHOSH.${hiveconf:CURRENT_BRAND}_US_CALIB_CUSTOMER_BASE;

DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_US_ACTIVE_CUSTOMERS;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_US_ACTIVE_CUSTOMERS AS SELECT
DISTINCT T1.CUSTOMER_KEY, T2.ACQUISITION_DATE,
(
CASE 
WHEN T1.CUSTOMER_KEY > 0 THEN DATE_ADD('${hiveconf:DATE_NOW}', - 365) 
ELSE NULL 
END
) AS CALIB_START_DATE,
(
CASE WHEN T1.CUSTOMER_KEY > 0 THEN DATE_ADD('${hiveconf:DATE_NOW}', - 1) ELSE NULL END
) AS CALIB_END_DATE
FROM
MDS.ODS_ORDERHEADER_T T1
INNER JOIN
(
SELECT
DISTINCT
CUSTOMER_KEY, ACQUISITION_DATE
FROM TGHOSH.${hiveconf:CURRENT_BRAND}_US_CALIB_CUSTOMER_BASE
) T2
ON T1.CUSTOMER_KEY = T2.CUSTOMER_KEY
WHERE
T1.COUNTRY='${hiveconf:CURRENT_COUNTRY}' AND
T1.BRAND='${hiveconf:CURRENT_BRAND}' AND
T1.TRANSACTION_TYPE_CD IN ('S','M') AND
(
(
 T1.ORDER_STATUS='R' AND
 UNIX_TIMESTAMP(T1.SHIP_DATE,'yyyy-MM-dd') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 365), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1), 'yyyy-MM-dd')
 ) OR
(
 T1.ORDER_STATUS='O' AND
 UNIX_TIMESTAMP(T1.DEMAND_DATE, 'yyyy-MM-dd_HH-mm-ss_Z') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 365), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1), 'yyyy-MM-dd')
)
);

SELECT COUNT(*) FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_US_ACTIVE_CUSTOMERS;



DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V1;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V1 AS SELECT
T1.CUSTOMER_KEY, 
T1.TRANSACTION_NUM, 
T1.ORDER_NUM, 
T1.TRANSACTION_TYPE_CD, 
T1.ORDER_STATUS, 
T1.DEMAND_DATE, 
T1.SHIP_DATE,
T2.ACQUISITION_DATE,
T2.CALIB_START_DATE,
T2.CALIB_END_DATE,
COALESCE(T1.GROSS_SALES_AMT, 0) AS GROSS_SALES_AMT, 
COALESCE(T1.DISCOUNT_AMT, 0) AS DISCOUNT_AMT, 
COALESCE(T1.ITEM_QTY, 0) AS ITEM_QTY,
(
CASE 
WHEN T1.ORDER_STATUS = 'O'THEN T1.ORDER_NUM 
WHEN T1.ORDER_STATUS = 'R'THEN CAST(T1.TRANSACTION_NUM AS STRING) 
END
) AS UNIQUE_TRANSACTION_NUM,
(
CASE 
WHEN T1.ORDER_STATUS = 'O' THEN TO_DATE(T1.DEMAND_DATE)
WHEN T1.ORDER_STATUS = 'R' THEN T1.SHIP_DATE 
END
) AS PURCHASE_DATE
FROM
MDS.ODS_ORDERHEADER_T T1
INNER JOIN
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_US_ACTIVE_CUSTOMERS T2
ON T1.CUSTOMER_KEY = T2.CUSTOMER_KEY
WHERE
T1.COUNTRY='${hiveconf:CURRENT_COUNTRY}' AND
T1.BRAND='${hiveconf:CURRENT_BRAND}' AND
T1.TRANSACTION_TYPE_CD IN ('S','M','R') AND 
(
(T1.ORDER_STATUS='R' AND
 UNIX_TIMESTAMP(T1.SHIP_DATE,'yyyy-MM-dd') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 365), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1), 'yyyy-MM-dd')
 ) OR
(T1.ORDER_STATUS='O' AND
 UNIX_TIMESTAMP(T1.DEMAND_DATE, 'yyyy-MM-dd_HH-mm-ss_Z') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 365), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1), 'yyyy-MM-dd')
)
);


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_FPDT;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_FPDT
AS SELECT
CUSTOMER_KEY, MIN(PURCHASE_DATE) AS FIRST_PURCHASE_DATE
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V1
GROUP BY CUSTOMER_KEY;



DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V2;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V2
AS SELECT
T1.*, T2.FIRST_PURCHASE_DATE
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V1 T1
LEFT OUTER JOIN
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_FPDT T2
ON T1.CUSTOMER_KEY = T2.CUSTOMER_KEY;



DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V3;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V3
AS SELECT
T1.*,
(
CASE 
WHEN T1.PURCHASE_DATE = T1.FIRST_PURCHASE_DATE THEN CAST(0 AS FLOAT)
ELSE T1.GROSS_SALES_AMT
END
) AS LTV_SALES_AMT,
(
CASE 
WHEN T1.PURCHASE_DATE = T1.FIRST_PURCHASE_DATE THEN CAST(0 AS FLOAT)
ELSE T1.DISCOUNT_AMT
END
) AS LTV_DISCOUNT_AMT,
(
CASE 
WHEN T1.PURCHASE_DATE = T1.FIRST_PURCHASE_DATE THEN 0L
ELSE T1.ITEM_QTY
END
) AS LTV_ITEM_QTY
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V2 T1;



DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V4;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V4
AS SELECT 
T1.CUSTOMER_KEY,
MIN(T1.ACQUISITION_DATE) AS ACQUISITION_DATE,
MIN(T1.CALIB_START_DATE) AS CALIB_START_DATE,
MAX(T1.CALIB_END_DATE) AS CALIB_END_DATE,
MIN(T1.PURCHASE_DATE) AS MIN_PURCHASE_DATE, 
MAX(T1.PURCHASE_DATE) AS MAX_PURCHASE_DATE, 
COUNT(DISTINCT T1.PURCHASE_DATE) AS TRANSACTION_DAYS, 
COUNT(DISTINCT T1.PURCHASE_DATE) - 1 AS REPEAT_TRANSACTION_DAYS,
COUNT(DISTINCT UNIQUE_TRANSACTION_NUM) AS TRANSACTIONS,
COUNT(DISTINCT UNIQUE_TRANSACTION_NUM) - 1 AS REPEAT_TRANSACTIONS,
SUM(T1.GROSS_SALES_AMT) + SUM(T1.DISCOUNT_AMT) AS SPEND,
SUM(T1.LTV_SALES_AMT) + SUM(T1.LTV_DISCOUNT_AMT) AS REPEAT_SPEND 
FROM 
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V3 T1 
GROUP BY T1.CUSTOMER_KEY;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V5;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V5
AS SELECT 
T1.*,
DATEDIFF(T1.MAX_PURCHASE_DATE, T1.MIN_PURCHASE_DATE) / 7 AS CUSTOMER_DURATION,
DATEDIFF(T1.CALIB_END_DATE, T1.MIN_PURCHASE_DATE) / 7 AS STUDY_DURATION
FROM 
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V4 T1;



DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V6;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V6
AS SELECT 
T1.*,
SPEND / TRANSACTION_DAYS AS AVG_SPEND,
(
CASE 
WHEN REPEAT_TRANSACTION_DAYS > 0 THEN REPEAT_SPEND / REPEAT_TRANSACTION_DAYS
ELSE CAST(0 AS DOUBLE)
END
) AS REPEAT_AVG_SPEND
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V5 T1;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V7;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V7
AS SELECT 
T1.*,
T2.TRANSACTION_DAYS_99_75, T2.AVG_SPEND_99_75,
T2.REPEAT_TRANSACTION_DAYS_99_75, T2.REPEAT_AVG_SPEND_99_75
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V6 T1
INNER JOIN
(
SELECT
PERCENTILE(TRANSACTION_DAYS, 0.9975) AS TRANSACTION_DAYS_99_75,
PERCENTILE_APPROX(AVG_SPEND, 0.9975) AS AVG_SPEND_99_75,
PERCENTILE(REPEAT_TRANSACTION_DAYS, 0.9975) AS REPEAT_TRANSACTION_DAYS_99_75,
PERCENTILE_APPROX(REPEAT_AVG_SPEND, 0.9975) AS REPEAT_AVG_SPEND_99_75
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V6
) T2
;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V8;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V8
AS SELECT 
T1.*,
(
CASE 
WHEN T1.AVG_SPEND > T1.AVG_SPEND_99_75 THEN T1.AVG_SPEND_99_75
WHEN T1.AVG_SPEND < 0 THEN CAST(0 AS DOUBLE)
ELSE T1.AVG_SPEND
END
) AS TRUNC_AVG_SPEND,
(
CASE 
WHEN T1.TRANSACTION_DAYS > T1.TRANSACTION_DAYS_99_75 THEN T1.TRANSACTION_DAYS_99_75
ELSE CAST(T1.TRANSACTION_DAYS AS DOUBLE)
END
) AS TRUNC_TRANSACTION_DAYS,
(
CASE 
WHEN T1.REPEAT_AVG_SPEND > T1.REPEAT_AVG_SPEND_99_75 THEN T1.REPEAT_AVG_SPEND_99_75
WHEN T1.REPEAT_AVG_SPEND < 0 THEN CAST(0 AS DOUBLE)
ELSE T1.REPEAT_AVG_SPEND
END
) AS TRUNC_REPEAT_AVG_SPEND,
(
CASE 
WHEN T1.REPEAT_TRANSACTION_DAYS > T1.REPEAT_TRANSACTION_DAYS_99_75 THEN T1.REPEAT_TRANSACTION_DAYS_99_75
ELSE CAST(T1.REPEAT_TRANSACTION_DAYS AS DOUBLE)
END
) AS TRUNC_REPEAT_TRANSACTION_DAYS
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V7 T1
;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V9;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V9
AS SELECT 
T1.*,
(
CASE
WHEN TRUNC_REPEAT_TRANSACTION_DAYS > CAST(0 AS DOUBLE) THEN 1
ELSE 0
END
) AS TRANSACTION_DATA_FLAG,
(
CASE
WHEN TRUNC_REPEAT_AVG_SPEND > CAST(0 AS DOUBLE) THEN 1
ELSE 0
END
) AS SPEND_DATA_FLAG
FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V8 T1;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION
AS SELECT
CAST(CUSTOMER_KEY AS DOUBLE),
CAST(ACQUISITION_DATE AS STRING),
CAST(CALIB_START_DATE AS STRING),
CAST(CALIB_END_DATE AS STRING),
CAST(MIN_PURCHASE_DATE AS STRING),
CAST(MAX_PURCHASE_DATE AS STRING),
CAST(TRANSACTION_DAYS AS DOUBLE),
CAST(SPEND AS DOUBLE),
CAST(REPEAT_TRANSACTION_DAYS AS DOUBLE),
CAST(REPEAT_SPEND AS DOUBLE),
CAST(CUSTOMER_DURATION AS DOUBLE),
CAST(STUDY_DURATION AS DOUBLE),
CAST(TRUNC_TRANSACTION_DAYS AS DOUBLE),
CAST(TRUNC_AVG_SPEND AS DOUBLE),
CAST(TRUNC_REPEAT_TRANSACTION_DAYS AS DOUBLE),
CAST(TRUNC_REPEAT_AVG_SPEND AS DOUBLE)
FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_V9;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION_TXT;
CREATE EXTERNAL TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION_TXT
(
CUSTOMER_KEY DOUBLE,
ACQUISITION_DATE STRING,
CALIB_START_DATE STRING,
CALIB_END_DATE STRING,
MIN_PURCHASE_DATE STRING,
MAX_PURCHASE_DATE STRING,
TRANSACTION_DAYS DOUBLE,
SPEND DOUBLE,
REPEAT_TRANSACTION_DAYS DOUBLE,
REPEAT_SPEND DOUBLE,
CUSTOMER_DURATION DOUBLE,
STUDY_DURATION DOUBLE,
TRUNC_TRANSACTION_DAYS DOUBLE,
TRUNC_AVG_SPEND DOUBLE,
TRUNC_REPEAT_TRANSACTION_DAYS DOUBLE,
TRUNC_REPEAT_AVG_SPEND DOUBLE
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
LINES TERMINATED BY '\n'
LOCATION '/user/tghosh/${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION_TXT'
TBLPROPERTIES('serialization.null.format'='');


INSERT OVERWRITE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION_TXT
SELECT 
T1.CUSTOMER_KEY,
T1.ACQUISITION_DATE,
T1.CALIB_START_DATE,
T1.CALIB_END_DATE,
T1.MIN_PURCHASE_DATE,
T1.MAX_PURCHASE_DATE,
T1.TRANSACTION_DAYS,
T1.SPEND,
T1.REPEAT_TRANSACTION_DAYS,
T1.REPEAT_SPEND,
T1.CUSTOMER_DURATION,
T1.STUDY_DURATION,
T1.TRUNC_TRANSACTION_DAYS,
T1.TRUNC_AVG_SPEND,
T1.TRUNC_REPEAT_TRANSACTION_DAYS,
T1.TRUNC_REPEAT_AVG_SPEND
FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION T1;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_12_V1;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_12_V1 AS SELECT
T1.CUSTOMER_KEY, 
T1.TRANSACTION_NUM, 
T1.ORDER_NUM, 
T1.TRANSACTION_TYPE_CD, 
T1.ORDER_STATUS, 
T1.DEMAND_DATE, 
T1.SHIP_DATE,
COALESCE(T1.GROSS_SALES_AMT, 0) AS GROSS_SALES_AMT, 
COALESCE(T1.DISCOUNT_AMT, 0) AS DISCOUNT_AMT, 
COALESCE(T1.ITEM_QTY, 0) AS ITEM_QTY,
(
CASE 
WHEN T1.ORDER_STATUS = 'O' THEN T1.ORDER_NUM 
WHEN T1.ORDER_STATUS = 'R' THEN CAST(T1.TRANSACTION_NUM AS STRING) 
END
) AS UNIQUE_TRANSACTION_NUM,
(
CASE 
WHEN T1.ORDER_STATUS = 'O' THEN TO_DATE(T1.DEMAND_DATE)
WHEN T1.ORDER_STATUS = 'R' THEN T1.SHIP_DATE 
END
) AS PURCHASE_DATE,
(
CASE
WHEN T1.CUSTOMER_KEY > 0 THEN DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 1)
ELSE NULL
END
) AS VALID_START_DATE,
(
CASE
WHEN T1.CUSTOMER_KEY > 0 THEN DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 365)
ELSE NULL
END
) AS VALID_END_DATE
FROM
MDS.ODS_ORDERHEADER_T T1
INNER JOIN
(
SELECT DISTINCT CUSTOMER_KEY FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION
) T2
ON T1.CUSTOMER_KEY = T2.CUSTOMER_KEY
WHERE
T1.COUNTRY='${hiveconf:CURRENT_COUNTRY}' AND
T1.BRAND='${hiveconf:CURRENT_BRAND}' AND
T1.TRANSACTION_TYPE_CD IN ('S','M','R') AND 
(
(T1.ORDER_STATUS='R' AND
 UNIX_TIMESTAMP(T1.SHIP_DATE,'yyyy-MM-dd') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 1), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 365), 'yyyy-MM-dd')
 ) OR
(T1.ORDER_STATUS='O' AND
 UNIX_TIMESTAMP(T1.DEMAND_DATE, 'yyyy-MM-dd_HH-mm-ss_Z') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 1), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 365), 'yyyy-MM-dd')
)
);


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_12_V2;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_12_V2
AS SELECT 
T1.CUSTOMER_KEY,
MIN(T1.VALID_START_DATE) AS VALID_START_DATE_12,
MAX(T1.VALID_END_DATE) AS VALID_END_DATE_12,
MIN(T1.PURCHASE_DATE) AS MIN_PURCHASE_DATE_12, 
MAX(T1.PURCHASE_DATE) AS MAX_PURCHASE_DATE_12, 
COUNT(DISTINCT T1.PURCHASE_DATE) AS TRANSACTION_DAYS_12, 
COUNT(DISTINCT UNIQUE_TRANSACTION_NUM) AS TRANSACTIONS_12,
SUM(T1.GROSS_SALES_AMT) + SUM(T1.DISCOUNT_AMT) AS SPEND_12
FROM 
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_12_V1 T1 
GROUP BY T1.CUSTOMER_KEY;



DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_15_V1;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_15_V1 AS SELECT
T1.CUSTOMER_KEY, 
T1.TRANSACTION_NUM, 
T1.ORDER_NUM, 
T1.TRANSACTION_TYPE_CD, 
T1.ORDER_STATUS, 
T1.DEMAND_DATE, 
T1.SHIP_DATE,
COALESCE(T1.GROSS_SALES_AMT, 0) AS GROSS_SALES_AMT, 
COALESCE(T1.DISCOUNT_AMT, 0) AS DISCOUNT_AMT, 
COALESCE(T1.ITEM_QTY, 0) AS ITEM_QTY,
(
CASE 
WHEN T1.ORDER_STATUS = 'O' THEN T1.ORDER_NUM 
WHEN T1.ORDER_STATUS = 'R' THEN CAST(T1.TRANSACTION_NUM AS STRING) 
END
) AS UNIQUE_TRANSACTION_NUM,
(
CASE 
WHEN T1.ORDER_STATUS = 'O' THEN TO_DATE(T1.DEMAND_DATE)
WHEN T1.ORDER_STATUS = 'R' THEN T1.SHIP_DATE 
END
) AS PURCHASE_DATE,
(
CASE
WHEN T1.CUSTOMER_KEY > 0 THEN DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 1)
ELSE NULL
END
) AS VALID_START_DATE,
(
CASE
WHEN T1.CUSTOMER_KEY > 0 THEN DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 365 + 90)
ELSE NULL
END
) AS VALID_END_DATE
FROM
MDS.ODS_ORDERHEADER_T T1
INNER JOIN
(
SELECT DISTINCT CUSTOMER_KEY FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_CALIB_TRANSACTION
) T2
ON T1.CUSTOMER_KEY = T2.CUSTOMER_KEY
WHERE
T1.COUNTRY='${hiveconf:CURRENT_COUNTRY}' AND
T1.BRAND='${hiveconf:CURRENT_BRAND}' AND
T1.TRANSACTION_TYPE_CD IN ('S','M','R') AND 
(
(T1.ORDER_STATUS='R' AND
 UNIX_TIMESTAMP(T1.SHIP_DATE,'yyyy-MM-dd') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 1), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 365 + 90), 'yyyy-MM-dd')
 ) OR
(T1.ORDER_STATUS='O' AND
 UNIX_TIMESTAMP(T1.DEMAND_DATE, 'yyyy-MM-dd_HH-mm-ss_Z') BETWEEN
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 1), 'yyyy-MM-dd') AND 
 UNIX_TIMESTAMP(DATE_ADD('${hiveconf:DATE_NOW}', - 1 + 365 + 90), 'yyyy-MM-dd')
)
);


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_15_V2;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_15_V2
AS SELECT 
T1.CUSTOMER_KEY,
MIN(T1.VALID_START_DATE) AS VALID_START_DATE_15,
MAX(T1.VALID_END_DATE) AS VALID_END_DATE_15,
MIN(T1.PURCHASE_DATE) AS MIN_PURCHASE_DATE_15, 
MAX(T1.PURCHASE_DATE) AS MAX_PURCHASE_DATE_15, 
COUNT(DISTINCT T1.PURCHASE_DATE) AS TRANSACTION_DAYS_15, 
COUNT(DISTINCT UNIQUE_TRANSACTION_NUM) AS TRANSACTIONS_15,
SUM(T1.GROSS_SALES_AMT) + SUM(T1.DISCOUNT_AMT) AS SPEND_15
FROM 
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_15_V1 T1 
GROUP BY T1.CUSTOMER_KEY;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION;
CREATE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION
AS SELECT
T1.CUSTOMER_KEY,
T1.VALID_START_DATE_15 AS VALID_START_DATE,
T2.VALID_END_DATE_12,
T1.VALID_END_DATE_15,
T1.MIN_PURCHASE_DATE_15 AS MIN_PURCHASE_DATE,
T2.MAX_PURCHASE_DATE_12,
T1.MAX_PURCHASE_DATE_15,
T2.TRANSACTION_DAYS_12,
T2.TRANSACTIONS_12,
T2.SPEND_12,
T1.TRANSACTION_DAYS_15,
T1.TRANSACTIONS_15,
T1.SPEND_15
FROM
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_15_V2 T1
LEFT OUTER JOIN
TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_12_V2 T2
ON T1.CUSTOMER_KEY = T2.CUSTOMER_KEY;


DROP TABLE IF EXISTS TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION_TXT;
CREATE EXTERNAL TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION_TXT
(
CUSTOMER_KEY DOUBLE,
VALID_START_DATE STRING,
VALID_END_DATE_12 STRING,
VALID_END_DATE_15 STRING,
MIN_PURCHASE_DATE STRING,
MAX_PURCHASE_DATE_12 STRING,
MAX_PURCHASE_DATE_15 STRING,
TRANSACTION_DAYS_12 DOUBLE,
TRANSACTIONS_12 DOUBLE,
SPEND_12 DOUBLE,
TRANSACTION_DAYS_15 DOUBLE,
TRANSACTIONS_15 DOUBLE,
SPEND_15 DOUBLE
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
LINES TERMINATED BY '\n'
LOCATION '/user/tghosh/${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION_TXT'
TBLPROPERTIES('serialization.null.format'='');



INSERT OVERWRITE TABLE TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION_TXT
SELECT 
CAST(T1.CUSTOMER_KEY AS DOUBLE),
CAST(T1.VALID_START_DATE AS STRING),
CAST(T1.VALID_END_DATE_12 AS STRING),
CAST(T1.VALID_END_DATE_15 AS STRING),
CAST(T1.MIN_PURCHASE_DATE AS STRING),
CAST(T1.MAX_PURCHASE_DATE_12 AS STRING),
CAST(T1.MAX_PURCHASE_DATE_15 AS STRING),
CAST(T1.TRANSACTION_DAYS_12 AS DOUBLE),
CAST(T1.TRANSACTIONS_12 AS DOUBLE),
CAST(T1.SPEND_12 AS DOUBLE),
CAST(T1.TRANSACTION_DAYS_15 AS DOUBLE),
CAST(T1.TRANSACTIONS_15 AS DOUBLE),
CAST(T1.SPEND_15 AS DOUBLE)
FROM TGHOSH.${hiveconf:CURRENT_BRAND}_${hiveconf:DATEINDEX}_LTV_VALID_TRANSACTION T1;



